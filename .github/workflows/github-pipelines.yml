name: GitLab Flow CI/CD Pipeline

on:
  # Автоматические триггеры (GitLab Flow)
  push:
    branches:
      - main      # Продакшен-деплой
      - staging   # Пре-продакшен
  pull_request:
    branches:
      - main      # Обязательный код-ревью перед мержем

  # Ручной запуск (для production)
  workflow_dispatch:
    inputs:
      deploy_to:
        description: 'Окружение для деплоя'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Полная пересборка образа'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: 1.24.0
  DOCKER_IMAGE: RuslanM36/lastone
  DOCKER_TAG: latest

jobs:
  # Этап тестирования (для всех веток)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository  # Запрет форков
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go mod tidy
      - run: go test -v ./...

  # Сборка образа (только для main/staging)
  build:
    name: Build Docker Image
    needs: test
    runs-on: self-hosted
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/staging' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ github.event.inputs.deploy_to || 'staging' }}

  # Деплой (строго по GitLab Flow)
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_to || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    needs: build
    runs-on: self-hosted
    if: |
      (github.ref == 'refs/heads/main' && github.event.inputs.deploy_to != 'staging') ||
      (github.ref == 'refs/heads/staging' && github.event.inputs.deploy_to != 'production') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - name: Stop Old Container
        run: |
          docker stop $(docker ps -q --filter ancestor=${{ env.DOCKER_IMAGE }}) || true
          docker rm $(docker ps -aq --filter ancestor=${{ env.DOCKER_IMAGE }}) || true

      - name: Deploy Container
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          docker run -d \
            -p 88:8888 \
            -e ENVIRONMENT=${{ github.event.inputs.deploy_to || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} \
            --restart always \
            --name app-${{ github.event.inputs.deploy_to || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Health Check
        run: |
          sleep 10  # Даем контейнеру время запуститься
          curl -sSf http://localhost:88/healthcheck || (docker logs app-${{ github.event.inputs.deploy_to || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} && exit 1)